- name: deploy podified OVN ovsdb-servers
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc patch openstackcontrolplane {{ openstack_cr_name }} --type=merge --patch '
    spec:
      ovn:
        enabled: true
        template:
          ovnDBCluster:
            ovndbcluster-nb:
              dbType: NB
              storageRequest: 10G
              networkAttachment: internalapi
            ovndbcluster-sb:
              dbType: SB
              storageRequest: 10G
              networkAttachment: internalapi
    '

- name: wait for OVN ovsdb-servers to start up
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc wait --for=jsonpath='{.status.phase}'=Running pod --selector=service=ovsdbserver-nb
    oc wait --for=jsonpath='{.status.phase}'=Running pod --selector=service=ovsdbserver-sb

# NOTE: w/o pods readiness gates, a service IP is not immediately comes in, so we wait
- name: get podified OVN NB ovsdb-server service cluster IP
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc get svc --selector "statefulset.kubernetes.io/pod-name=ovsdbserver-nb-0" -ojsonpath='{.items[0].spec.clusterIP}'
  register: podified_ovn_nb_ip_result
  until: podified_ovn_nb_ip_result is success
  retries: 10
  delay: 2

- name: get podified OVN SB ovsdb-server IP
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc get svc --selector "statefulset.kubernetes.io/pod-name=ovsdbserver-sb-0" -ojsonpath='{.items[0].spec.clusterIP}'
  register: podified_ovn_sb_ip_result
  until: podified_ovn_sb_ip_result is success
  retries: 10
  delay: 2

# NOTE: this represents tmp/ovn/oc_run_args.yaml contents for the documented manual steps
- name: set fact for adoption helper pod run args
  ansible.builtin.set_fact:
    oc_run_args:
      apiVersion: v1
      kind: Pod
      metadata:
        name: adoption
      spec:
        containers:
        - image: "{{ ovn_image }}"
          command: [ "sh", "-c", "sleep infinity"]
          name: adoption
          volumeMounts:
          - mountPath: /backup
            name: backup
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ALL
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        volumes:
        - hostPath:
            path: "{{ playbook_dir }}/{{ ovn_copy_tmp_dir }}"
            type: Directory
          name: backup

- name: create ovn DB copy dir
  ansible.builtin.file:
    path: "{{ ovn_copy_tmp_dir }}"
    state: directory
    mode: "0750"

# NOTE: ansible escapes JSON in shell so this task and the documented manual command differs.
# The shell equivalent of getting this as oc_run_args.json:
# cat tmp/ovn/oc_run_args.yaml | python -c "import json, yaml, sys; print(json.dumps(yaml.safe_load(sys.stdin)))"
- name: prepare oc run args file
  copy:
    content: "{{ oc_run_args }}"
    dest: "{{ ovn_copy_tmp_dir }}/oc_run_args.json"

- name: start an adoption helper pod
  ansible.builtin.shell: |-
    {{ shell_header }}
    {{ oc_header }}
    oc delete pod adoption --ignore-not-found=true;
    oc apply -f {{ playbook_dir }}/{{ ovn_copy_tmp_dir }}/oc_run_args.json;
    oc wait --for=condition=Ready pod adoption --timeout=30s
  changed_when: true
  notify: stop adoption helper pod

- name: set fact for oc run args
  ansible.builtin.set_fact:
    oc_run_args:
      spec:
        containers:
        - image: "{{ ovn_image }}"
          command: [ "sh", "-c", "sleep infinity"]
          name: adoption
          volumeMounts:
          - mountPath: /backup
            name: backup
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ALL
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        volumes:
        - hostPath:
            path: "{{ playbook_dir }}/{{ ovn_copy_tmp_dir }}"
            type: Directory
          name: backup

- name: prepare oc run args file
  copy:
    content: "{{ oc_run_args }}"
    dest: "{{ ovn_copy_tmp_dir }}/oc_run_args.yaml"
  register: oc_run_args_file

- name: set fact for oc run command
  ansible.builtin.set_fact:
    oc_run_cmd: >-
      oc delete pod adoption --ignore-not-found=true;
      oc run adoption
      --image {{ ovn_image }}
      --overrides='$(cat {{ playbook_dir }}/{{ ovn_copy_tmp_dir }}/oc_run_args.yaml)';
      oc wait --for=condition=Ready pod adoption --timeout=30s

- name: start an adoption helper pod
  ansible.builtin.shell: |-
    {{ shell_header }}
    {{ oc_header }}
    
    OCRUN="{{ oc_run_cmd }}"
    eval $OCRUN
  changed_when: true
  notify: stop adoption helper pod

- name: set OVN copy shell vars
  no_log: "{{ use_no_log }}"
  ansible.builtin.set_fact:
    ovn_copy_shell_vars: |
      PODIFIED_OVSDB_NB_IP={{ podified_ovn_nb_ip_result.stdout }}
      PODIFIED_OVSDB_SB_IP={{ podified_ovn_sb_ip_result.stdout }}
      OVSDB_IMAGE={{ ovn_image }}

      # TODO: remove the default(external_...) when CI is transitioned to use 'source_...'
      SOURCE_OVSDB_IP={{ source_ovndb_ip|default(external_ovndb_ip) }}

      CONTROLLER1_SSH="{{ controller1_ssh }}"
      CONTROLLER2_SSH="{{ controller2_ssh }}"
      CONTROLLER3_SSH="{{ controller3_ssh }}"

- name: stop northd service
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}

    $CONTROLLER1_SSH sudo systemctl stop tripleo_ovn_cluster_northd.service
    $CONTROLLER2_SSH sudo systemctl stop tripleo_ovn_cluster_northd.service
    $CONTROLLER3_SSH sudo systemctl stop tripleo_ovn_cluster_northd.service

- name: dump OVN databases
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}

    cd {{ ovn_copy_tmp_dir }}

    oc exec adoption -- bash -c "ovsdb-client backup tcp:$SOURCE_OVSDB_IP:6641 > /backup/ovs-nb.db"
    oc exec adoption -- bash -c "ovsdb-client backup tcp:$SOURCE_OVSDB_IP:6642 > /backup/ovs-sb.db"

- name: upgrade OVN databases to the latest schema from podified ovsdb-servers
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}

    cd {{ ovn_copy_tmp_dir }}

    oc exec adoption -- bash -c "ovsdb-client get-schema tcp:$PODIFIED_OVSDB_NB_IP:6641 > /backup/ovs-nb.ovsschema && ovsdb-tool convert /backup/ovs-nb.db /backup/ovs-nb.ovsschema"
    oc exec adoption -- bash -c "ovsdb-client get-schema tcp:$PODIFIED_OVSDB_SB_IP:6642 > /backup/ovs-sb.ovsschema && ovsdb-tool convert /backup/ovs-sb.db /backup/ovs-sb.ovsschema"

- name: restore OVN database backups to podified ovsdb-servers
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}

    cd {{ ovn_copy_tmp_dir }}

    oc exec adoption -- bash -c "ovsdb-client restore tcp:$PODIFIED_OVSDB_NB_IP:6641 < /backup/ovs-nb.db"
    oc exec adoption -- bash -c "ovsdb-client restore tcp:$PODIFIED_OVSDB_SB_IP:6642 < /backup/ovs-sb.db"

- name: deploy podified OVN northd service to keep databases in sync
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc patch openstackcontrolplane {{ openstack_cr_name }} --type=merge --patch '
    spec:
      ovn:
        enabled: true
        template:
          ovnNorthd:
            containerImage: {{ container_registry|default("quay.io") }}/{{ container_namespace|default("podified-antelope-centos9") }}/openstack-ovn-northd:{{ container_tag | default("current-podified") }}
            networkAttachment: internalapi
            replicas: 1
    '

- name: list briefs from OVN NB and SB databases
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}

    oc exec ovsdbserver-nb-0 ovn-nbctl show
    oc exec ovsdbserver-sb-0 ovn-sbctl show

  register: ovn_show_responding_result
