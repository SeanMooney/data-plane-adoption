- name: create osp-secret
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    cd {{ install_yamls_path }}
    make input

- name: set service passwords
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {% if cinder_password %}
        oc set data secret/osp-secret "CinderPassword={{ cinder_password }}"
    {% endif %}
    {% if glance_password %}
        oc set data secret/osp-secret "GlancePassword={{ glance_password }}"
    {% endif %}
    {% if ironic_password %}
        oc set data secret/osp-secret "IronicPassword={{ ironic_password }}"
    {% endif %}
    {% if neutron_password %}
        oc set data secret/osp-secret "NeutronPassword={{ neutron_password }}"
    {% endif %}
    {% if nova_password %}
        oc set data secret/osp-secret "NovaPassword={{ nova_password }}"
    {% endif %}
    {% if octavia_password %}
        oc set data secret/osp-secret "OctaviaPassword={{ octavia_password }}"
    {% endif %}
    {% if placement_password %}
        oc set data secret/osp-secret "PlacementPassword={{ placement_password }}"
    {% endif %}

- name: deploy backend services
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f - <<EOF
    apiVersion: core.openstack.org/v1beta1
    kind: OpenStackControlPlane
    metadata:
      name: openstack
    spec:
      secret: osp-secret
      storageClass: local-storage

      cinder:
        enabled: false
        template:
          cinderAPI: {}
          cinderScheduler: {}
          cinderBackup: {}
          cinderVolumes: {}

      dns:
        enabled: true
        template:
          externalEndpoints:
          - ipAddressPool: ctlplane
            loadBalancerIPs:
            - 192.168.122.80
          options:
          - key: server
            values:
            - 192.168.122.1
          replicas: 1

      glance:
        enabled: false
        template:
          glanceAPIInternal: {}
          glanceAPIExternal: {}

      horizon:
        enabled: false
        template: {}

      ironic:
        enabled: false
        template:
          ironicConductors: []

      keystone:
        enabled: false
        template: {}

      manila:
        enabled: false
        template:
          manilaAPI: {}
          manilaScheduler: {}
          manilaShares: {}

      mariadb:
        templates:
          openstack:
            storageRequest: 500M

      memcached:
        enabled: true

      neutron:
        enabled: false
        template: {}

      nova:
        enabled: false
        template: {}

      ovn:
        enabled: false
        template:
          ovnController:
            external-ids:
              system-id: "random"
              ovn-bridge: "br-int"
              ovn-encap-type: "geneve"

      placement:
        enabled: false
        template: {}

      rabbitmq:
        templates:
          rabbitmq:
            externalEndpoint:
              loadBalancerIPs:
              - 172.17.0.85
              ipAddressPool: internalapi
              sharedIP: false
            replicas: 1
          rabbitmq-cell1:
            externalEndpoint:
              loadBalancerIPs:
              - 172.17.0.86
              ipAddressPool: internalapi
              sharedIP: false
            replicas: 1

      telemetry:
        enabled: false
        template: {}
    EOF

- name: wait for mariadb to start up
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc get pod mariadb-openstack -o jsonpath='{.status.phase}{"\n"}' | grep Running
  register: mariadb_running_result
  until: mariadb_running_result is success
  retries: 60
  delay: 2

- name: Patch rabbitmq resources for lower resource consumption
  changed_when: false
  ansible.builtin.shell: |
    crname=$(oc get openstackcontrolplane -o name)
    oc patch ${crname} --type json \
      -p='[{"op": "replace", "path": "/spec/rabbitmq/templates/rabbitmq/resources/requests/cpu", "value": 500m}]'
    oc patch ${crname} --type json \
      -p='[{"op": "replace", "path": "/spec/rabbitmq/templates/rabbitmq/resources/requests/memory", "value": 500Mi}]'
    oc patch ${crname} --type json \
      -p='[{"op": "replace", "path": "/spec/rabbitmq/templates/rabbitmq-cell1/resources/requests/cpu", "value": 500m}]'
    oc patch ${crname} --type json \
      -p='[{"op": "replace", "path": "/spec/rabbitmq/templates/rabbitmq-cell1/resources/requests/memory", "value": 500Mi}]'
